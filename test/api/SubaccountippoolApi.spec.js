/*
 * SendPost API
 * SendPost API to transactional emails reliably
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendpost.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.SubaccountippoolApi();
  });

  describe('(package)', function() {
    describe('SubaccountippoolApi', function() {
      describe('iPPoolRouterCreate', function() {
        it('should call iPPoolRouterCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for iPPoolRouterCreate call and complete the assertions
          /*
          var xSubAccountApiKey = "xSubAccountApiKey_example";
          var body = new SendPostApi.ModelsEIPPool();
          body.ips = [new SendPostApi.ModelsEIP()];
          body.ips[0].publicIp = "";
          body.name = "";
          body.overflowPool = false;

          instance.iPPoolRouterCreate(xSubAccountApiKey, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIPPool);
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            {
              let dataCtr = data.ips;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendPostApi.ModelsIP);
                expect(data.autoWarmupEnabled).to.be.a('boolean');
                expect(data.autoWarmupEnabled).to.be(false);
                expect(data.autoWarmupStage).to.be.a('number');
                expect(data.autoWarmupStage).to.be("0");
                expect(data.created).to.be.a('number');
                expect(data.created).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.publicIP).to.be.a('string');
                expect(data.publicIP).to.be("");

                      }
            }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.overflowPool).to.be.a('boolean');
            expect(data.overflowPool).to.be(false);
            expect(data.type).to.be.a(SendPostApi.ModelsIPPoolType);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPPoolRouterDelete', function() {
        it('should call iPPoolRouterDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for iPPoolRouterDelete call and complete the assertions
          /*
          var xSubAccountApiKey = "xSubAccountApiKey_example";
          var ippoolid = 789;

          instance.iPPoolRouterDelete(xSubAccountApiKey, ippoolid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsDeleteResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.message).to.be.a('string');
            expect(data.message).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPPoolRouterGet', function() {
        it('should call iPPoolRouterGet successfully', function(done) {
          // TODO: uncomment, update parameter values for iPPoolRouterGet call and complete the assertions
          /*
          var xSubAccountApiKey = "xSubAccountApiKey_example";
          var ippoolid = 789;

          instance.iPPoolRouterGet(xSubAccountApiKey, ippoolid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIPPool);
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            {
              let dataCtr = data.ips;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendPostApi.ModelsIP);
                expect(data.autoWarmupEnabled).to.be.a('boolean');
                expect(data.autoWarmupEnabled).to.be(false);
                expect(data.autoWarmupStage).to.be.a('number');
                expect(data.autoWarmupStage).to.be("0");
                expect(data.created).to.be.a('number');
                expect(data.created).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.publicIP).to.be.a('string');
                expect(data.publicIP).to.be("");

                      }
            }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.overflowPool).to.be.a('boolean');
            expect(data.overflowPool).to.be(false);
            expect(data.type).to.be.a(SendPostApi.ModelsIPPoolType);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPPoolRouterGetAll', function() {
        it('should call iPPoolRouterGetAll successfully', function(done) {
          // TODO: uncomment, update parameter values for iPPoolRouterGetAll call and complete the assertions
          /*
          var xSubAccountApiKey = "xSubAccountApiKey_example";

          instance.iPPoolRouterGetAll(xSubAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsIPPool);
              expect(data.created).to.be.a('number');
              expect(data.created).to.be("0");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              {
                let dataCtr = data.ips;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SendPostApi.ModelsIP);
                  expect(data.autoWarmupEnabled).to.be.a('boolean');
                  expect(data.autoWarmupEnabled).to.be(false);
                  expect(data.autoWarmupStage).to.be.a('number');
                  expect(data.autoWarmupStage).to.be("0");
                  expect(data.created).to.be.a('number');
                  expect(data.created).to.be("0");
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be("0");
                  expect(data.publicIP).to.be.a('string');
                  expect(data.publicIP).to.be("");
  
                        }
              }
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.overflowPool).to.be.a('boolean');
              expect(data.overflowPool).to.be(false);
              expect(data.type).to.be.a(SendPostApi.ModelsIPPoolType);
      
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('iPPoolRouterUpdate', function() {
        it('should call iPPoolRouterUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for iPPoolRouterUpdate call and complete the assertions
          /*
          var xSubAccountApiKey = "xSubAccountApiKey_example";
          var ippoolid = 789;
          var body = new SendPostApi.ModelsEIPPool();
          body.ips = [new SendPostApi.ModelsEIP()];
          body.ips[0].publicIp = "";
          body.name = "";
          body.overflowPool = false;

          instance.iPPoolRouterUpdate(xSubAccountApiKey, ippoolid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsIPPool);
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            {
              let dataCtr = data.ips;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SendPostApi.ModelsIP);
                expect(data.autoWarmupEnabled).to.be.a('boolean');
                expect(data.autoWarmupEnabled).to.be(false);
                expect(data.autoWarmupStage).to.be.a('number');
                expect(data.autoWarmupStage).to.be("0");
                expect(data.created).to.be.a('number');
                expect(data.created).to.be("0");
                expect(data.id).to.be.a('number');
                expect(data.id).to.be("0");
                expect(data.publicIP).to.be.a('string');
                expect(data.publicIP).to.be("");

                      }
            }
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.overflowPool).to.be.a('boolean');
            expect(data.overflowPool).to.be(false);
            expect(data.type).to.be.a(SendPostApi.ModelsIPPoolType);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
