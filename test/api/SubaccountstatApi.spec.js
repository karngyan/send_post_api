/*
 * SendPost API
 * SendPost API to send fast transactional emails to inbox
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SendPostApi.SubaccountstatApi();
  });

  describe('(package)', function() {
    describe('SubaccountstatApi', function() {
      describe('subAccountStatsRouterGetAllAggregateSubAccountStats', function() {
        it('should call subAccountStatsRouterGetAllAggregateSubAccountStats successfully', function(done) {
          // TODO: uncomment, update parameter values for subAccountStatsRouterGetAllAggregateSubAccountStats call and complete the assertions
          /*
          var xSubAccountApiKey = "xSubAccountApiKey_example";

          instance.subAccountStatsRouterGetAllAggregateSubAccountStats(xSubAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsStats);
            expect(data.clicks).to.be.a('number');
            expect(data.clicks).to.be("0");
            expect(data.delivered).to.be.a('number');
            expect(data.delivered).to.be("0");
            expect(data.dropped).to.be.a('number');
            expect(data.dropped).to.be("0");
            expect(data.hardBounced).to.be.a('number');
            expect(data.hardBounced).to.be("0");
            expect(data.opens).to.be.a('number');
            expect(data.opens).to.be("0");
            expect(data.processed).to.be.a('number');
            expect(data.processed).to.be("0");
            expect(data.softBounced).to.be.a('number');
            expect(data.softBounced).to.be("0");
            expect(data.spams).to.be.a('number');
            expect(data.spams).to.be("0");
            expect(data.unsubscribed).to.be.a('number');
            expect(data.unsubscribed).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subAccountStatsRouterGetAllAggregateSubAccountStatsByGroup', function() {
        it('should call subAccountStatsRouterGetAllAggregateSubAccountStatsByGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for subAccountStatsRouterGetAllAggregateSubAccountStatsByGroup call and complete the assertions
          /*
          var xSubAccountApiKey = "xSubAccountApiKey_example";
          var group = "group_example";

          instance.subAccountStatsRouterGetAllAggregateSubAccountStatsByGroup(xSubAccountApiKey, group, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SendPostApi.ModelsStats);
            expect(data.clicks).to.be.a('number');
            expect(data.clicks).to.be("0");
            expect(data.delivered).to.be.a('number');
            expect(data.delivered).to.be("0");
            expect(data.dropped).to.be.a('number');
            expect(data.dropped).to.be("0");
            expect(data.hardBounced).to.be.a('number');
            expect(data.hardBounced).to.be("0");
            expect(data.opens).to.be.a('number');
            expect(data.opens).to.be("0");
            expect(data.processed).to.be.a('number');
            expect(data.processed).to.be("0");
            expect(data.softBounced).to.be.a('number');
            expect(data.softBounced).to.be("0");
            expect(data.spams).to.be.a('number');
            expect(data.spams).to.be("0");
            expect(data.unsubscribed).to.be.a('number');
            expect(data.unsubscribed).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subAccountStatsRouterGetAllSubAccountStats', function() {
        it('should call subAccountStatsRouterGetAllSubAccountStats successfully', function(done) {
          // TODO: uncomment, update parameter values for subAccountStatsRouterGetAllSubAccountStats call and complete the assertions
          /*
          var xSubAccountApiKey = "xSubAccountApiKey_example";

          instance.subAccountStatsRouterGetAllSubAccountStats(xSubAccountApiKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsRStats);
              expect(data._date).to.be.a('string');
              expect(data._date).to.be("");
              expect(data.stats).to.be.a(SendPostApi.ModelsStats);
                    expect(data.stats.clicks).to.be.a('number');
                expect(data.stats.clicks).to.be("0");
                expect(data.stats.delivered).to.be.a('number');
                expect(data.stats.delivered).to.be("0");
                expect(data.stats.dropped).to.be.a('number');
                expect(data.stats.dropped).to.be("0");
                expect(data.stats.hardBounced).to.be.a('number');
                expect(data.stats.hardBounced).to.be("0");
                expect(data.stats.opens).to.be.a('number');
                expect(data.stats.opens).to.be("0");
                expect(data.stats.processed).to.be.a('number');
                expect(data.stats.processed).to.be("0");
                expect(data.stats.softBounced).to.be.a('number');
                expect(data.stats.softBounced).to.be("0");
                expect(data.stats.spams).to.be.a('number');
                expect(data.stats.spams).to.be("0");
                expect(data.stats.unsubscribed).to.be.a('number');
                expect(data.stats.unsubscribed).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('subAccountStatsRouterGetAllSubAccountStatsByGroup', function() {
        it('should call subAccountStatsRouterGetAllSubAccountStatsByGroup successfully', function(done) {
          // TODO: uncomment, update parameter values for subAccountStatsRouterGetAllSubAccountStatsByGroup call and complete the assertions
          /*
          var xSubAccountApiKey = "xSubAccountApiKey_example";
          var group = "group_example";

          instance.subAccountStatsRouterGetAllSubAccountStatsByGroup(xSubAccountApiKey, group, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SendPostApi.ModelsRStats);
              expect(data._date).to.be.a('string');
              expect(data._date).to.be("");
              expect(data.stats).to.be.a(SendPostApi.ModelsStats);
                    expect(data.stats.clicks).to.be.a('number');
                expect(data.stats.clicks).to.be("0");
                expect(data.stats.delivered).to.be.a('number');
                expect(data.stats.delivered).to.be("0");
                expect(data.stats.dropped).to.be.a('number');
                expect(data.stats.dropped).to.be("0");
                expect(data.stats.hardBounced).to.be.a('number');
                expect(data.stats.hardBounced).to.be("0");
                expect(data.stats.opens).to.be.a('number');
                expect(data.stats.opens).to.be("0");
                expect(data.stats.processed).to.be.a('number');
                expect(data.stats.processed).to.be("0");
                expect(data.stats.softBounced).to.be.a('number');
                expect(data.stats.softBounced).to.be("0");
                expect(data.stats.spams).to.be.a('number');
                expect(data.stats.spams).to.be("0");
                expect(data.stats.unsubscribed).to.be.a('number');
                expect(data.stats.unsubscribed).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
