/*
 * SendPost API
 * SendPost API to send fast transactional emails to inbox
 *
 * OpenAPI spec version: 1.0.0
 * Contact: hello@sendx.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendPostApi);
  }
}(this, function(expect, SendPostApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsStats', function() {
      beforeEach(function() {
        instance = new SendPostApi.ModelsStats();
      });

      it('should create an instance of ModelsStats', function() {
        // TODO: update the code to test ModelsStats
        expect(instance).to.be.a(SendPostApi.ModelsStats);
      });

      it('should have the property clicks (base name: "clicks")', function() {
        // TODO: update the code to test the property clicks
        expect(instance).to.have.property('clicks');
        // expect(instance.clicks).to.be(expectedValueLiteral);
      });

      it('should have the property delivered (base name: "delivered")', function() {
        // TODO: update the code to test the property delivered
        expect(instance).to.have.property('delivered');
        // expect(instance.delivered).to.be(expectedValueLiteral);
      });

      it('should have the property dropped (base name: "dropped")', function() {
        // TODO: update the code to test the property dropped
        expect(instance).to.have.property('dropped');
        // expect(instance.dropped).to.be(expectedValueLiteral);
      });

      it('should have the property hardBounced (base name: "hardBounced")', function() {
        // TODO: update the code to test the property hardBounced
        expect(instance).to.have.property('hardBounced');
        // expect(instance.hardBounced).to.be(expectedValueLiteral);
      });

      it('should have the property opens (base name: "opens")', function() {
        // TODO: update the code to test the property opens
        expect(instance).to.have.property('opens');
        // expect(instance.opens).to.be(expectedValueLiteral);
      });

      it('should have the property processed (base name: "processed")', function() {
        // TODO: update the code to test the property processed
        expect(instance).to.have.property('processed');
        // expect(instance.processed).to.be(expectedValueLiteral);
      });

      it('should have the property softBounced (base name: "softBounced")', function() {
        // TODO: update the code to test the property softBounced
        expect(instance).to.have.property('softBounced');
        // expect(instance.softBounced).to.be(expectedValueLiteral);
      });

      it('should have the property spams (base name: "spams")', function() {
        // TODO: update the code to test the property spams
        expect(instance).to.have.property('spams');
        // expect(instance.spams).to.be(expectedValueLiteral);
      });

      it('should have the property unsubscribed (base name: "unsubscribed")', function() {
        // TODO: update the code to test the property unsubscribed
        expect(instance).to.have.property('unsubscribed');
        // expect(instance.unsubscribed).to.be(expectedValueLiteral);
      });

    });
  });

}));
